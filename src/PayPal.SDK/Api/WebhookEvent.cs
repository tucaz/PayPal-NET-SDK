//==============================================================================
//
//  This file was auto-generated by a tool using the PayPal REST API schema.
//  More information: https://developer.paypal.com/docs/api/
//
//==============================================================================
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Text;
using System.Security.Cryptography;
using Newtonsoft.Json;
using PayPal.Util;

namespace PayPal.Api
{
    /// <summary>
    /// A webhook event notification.
    /// <para>
    /// See <a href="https://developer.paypal.com/docs/api/">PayPal Developer documentation</a> for more information.
    /// </para>
    /// </summary>
    public class WebhookEvent : PayPalRelationalObject
    {
        /// <summary>
        /// The ID of the webhook event notification.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "id")]
        public string id { get; set; }

        /// <summary>
        /// The version of the event.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "event_version")]
        public string event_version { get; set; }

        /// <summary>
        /// The date and time when the webhook event notification was created.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "create_time")]
        public string create_time { get; set; }

        /// <summary>
        /// The name of the resource related to the webhook notification event.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "resource_type")]
        public string resource_type { get; set; }

        /// <summary>
        /// The event that triggered the webhook event notification.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "event_type")]
        public string event_type { get; set; }

        /// <summary>
        /// A summary description for the event notification. For example, `A payment authorization was created.`
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "summary")]
        public string summary { get; set; }

        /// <summary>
        /// The resource that triggered the webhook event notification.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "resource")]
        public object resource { get; set; }

        /// <summary>
        /// The event transmission status. Displayed only for internal API calls through the PayPal Developer portal.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "status")]
        public string status { get; set; }

        /// <summary>
        /// The list of transmissions for an event. Displayed only for internal API calls through the PayPal Developer portal.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "transmissions")]
        public List<object> transmissions { get; set; }

        /// <summary>
        /// Shows details for a webhook event notification, by ID.
        /// </summary>
        /// <param name="apiContext">APIContext used for the API call.</param>
        /// <param name="eventId">The ID of the webhook event notification for which to show details.</param>
        /// <returns>WebhookEvent</returns>
        public static WebhookEvent Get(APIContext apiContext, string eventId)
        {
            // Validate the arguments to be used in the request
            ArgumentValidator.ValidateAndSetupAPIContext(apiContext);
            ArgumentValidator.Validate(eventId, "eventId");

            // Configure and send the request
            var pattern = "v1/notifications/webhooks-events/{0}";
            var resourcePath = SDKUtil.FormatURIPath(pattern, new object[] { eventId });
            return PayPalResource.ConfigureAndExecute<WebhookEvent>(apiContext, HttpMethod.GET, resourcePath);
        }

        /// <summary>
        /// Resends the Webhooks event resource identified by event_id.
        /// </summary>
        /// <param name="apiContext">APIContext used for the API call.</param>
        /// <returns>WebhookEvent</returns>
        public WebhookEvent Resend(APIContext apiContext)
        {
            return WebhookEvent.Resend(apiContext, this.id);
        }

        /// <summary>
        /// Resends the Webhooks event resource identified by event_id.
        /// </summary>
        /// <param name="apiContext">APIContext used for the API call.</param>
        /// <param name="webhookEventId">ID of the webhook event to resend.</param>
        /// <returns>WebhookEvent</returns>
        public static WebhookEvent Resend(APIContext apiContext, string webhookEventId)
        {
            // Validate the arguments to be used in the request
            ArgumentValidator.ValidateAndSetupAPIContext(apiContext);
            ArgumentValidator.Validate(webhookEventId, "webhookEventId");

            // Configure and send the request
            var pattern = "v1/notifications/webhooks-events/{0}/resend";
            var resourcePath = SDKUtil.FormatURIPath(pattern, new object[] { webhookEventId });
            return PayPalResource.ConfigureAndExecute<WebhookEvent>(apiContext, HttpMethod.POST, resourcePath);
        }

        /// <summary>
        /// Retrieves the list of Webhooks events resources for the application associated with token. The developers can use it to see list of past webhooks events.
        /// </summary>
        /// <param name="apiContext">APIContext used for the API call.</param>
        /// <param name="pageSize">Number of items to be returned by a GET operation</param>
        /// <param name="startTime">Resource creation time that indicates the start of a range of results.</param>
        /// <param name="endTime">Resource creation time that indicates the end of a range of results.</param>
        /// <returns>WebhookEventList</returns>
        public static WebhookEventList List(APIContext apiContext, int pageSize = 10, string startTime = "", string endTime = "")
        {
            // Validate the arguments to be used in the request
            ArgumentValidator.ValidateAndSetupAPIContext(apiContext);

            var queryParameters = new QueryParameters();
            queryParameters["page_size"] = pageSize.ToString();
            queryParameters["start_time"] = startTime;
            queryParameters["end_time"] = endTime;

            // Configure and send the request
            var resourcePath = "v1/notifications/webhooks-events" + queryParameters.ToUrlFormattedString();
            return PayPalResource.ConfigureAndExecute<WebhookEventList>(apiContext, HttpMethod.GET, resourcePath);
        }

        /// <summary>
        /// Converts the algorithm name specified by <paramref name="authAlgorithmHeader"/> into a hash algorithm name recognized by <seealso cref="System.Security.Cryptography.CryptoConfig"/>.
        /// </summary>
        /// <param name="authAlgorithmHeader">The PAYPAL-AUTH-ALGO header value included with a received Webhook event.</param>
        /// <returns>A mapped hash algorithm name.</returns>
        public static string ConvertAuthAlgorithmHeaderToHashAlgorithmName(string authAlgorithmHeader)
        {
            // The PAYPAL-AUTH-ALGO header will be specified in a name recognized
            // by Java's java.security.Signature class.
            //
            // Currently, only RSA is supported, and the hashing algorithm will
            // be derived with the following assumption on the format:
            //   "<hash_algorithm>withRSA"
            var token = "withRSA";
            if (authAlgorithmHeader.EndsWith(token))
            {
                return authAlgorithmHeader.Split(new string[] { token }, StringSplitOptions.None)[0];
            }

            // At this point, we've encountered an unsupported algorithm.
            throw new AlgorithmNotSupportedException(string.Format("Unable to map {0} to a known hash algorithm.", authAlgorithmHeader));
        }
    }
}
